#include <iostream>
#include <queue>
#include <algorithm>
using namespace std;
struct barrel {
	int px, py;
	int vertical;
	barrel(int x, int y, int z) : px(x), py(y), vertical(z) {};
};
queue <barrel> que;
int n;
char map[51][51];
int visit[51][51];
int dx[4] = { -1,0,1,0 };
int dy[4] = { 0,1,0,1 };

void input()
{
	int cx, cy;
	int center = 0;
	scanf("%d", &n);
	for (int i = 0; i < n; i++)
		scanf("%s", &map[i]);
	for (int i = 0; i < n; i++)
	{
		for (int j = 0; j < n; j++)
		{
			if (map[i][j] == 'B')
			{
				center++;
				if (center == 2)
				{
					cx = i;
					cy = j;
				}
			}
		}
	}
	
	if (map[cx - 1][cy] == 'B' && map[cx + 1][cy] == 'B')
		que.push(barrel(cx, cy, 1));
	else if (map[cx][cy - 1] == 'B' && map[cx][cy + 1] == 'B')
		que.push(barrel(cx, cy, 0));
}
void moving()
{
	while (!que.empty())
	{
		int px1, px2, py1, py2;
		int px = que.front().px;
		int py = que.front().py;
		int ver = que.front().vertical;
		que.pop();
		/*
		if (ver == 1)
			puts("가로로 서있다.");
		else
			puts("세로로 누워있다.");
		*/
		if (ver == 1)
		{
			px1 = px - 1;
			py1 = py;
			px2 = px + 1;
			py2 = py;

		}
		else if (ver == 0)
		{
			px1 = px;
			py1 = py - 1;
			px2 = px;
			py2 = py + 1;
			
		}
	}
}
int main()
{
	input();
	moving();
}
