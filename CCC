#include <avr/sleep.h>
//PB4: Falling,Rising Edge detection
//PB3: Falling,Rising Edge detection
enum{
  STATE_SOS_WAIT,
  STATE_SOS_INIT,
  STATE_SOS_S1_ON,
  STATE_SOS_S1_OFF,
  STATE_SOS_O2_ON,
  STATE_SOS_O2_OFF,
  STATE_SOS_S3_ON,
  STATE_SOS_S3_OFF,  
};

#define LED_FULL  0xFF
#define LED_HALF  0x80
#define LED_LOW   0x19
#define S1_ON_TIME_DUTY     0x11 //66%
#define O2_ON_TIME_DUTY     0x12  //22%
#define S3_ON_TIME_DUTY     0x13 //44%
#define S1_ON_TIME_100MS    2 
#define S1_OFF_TIME_100MS   2
#define O2_ON_TIME_100MS    1
#define O2_OFF_TIME_100MS   1
#define S3_ON_TIME_100MS    2
#define S3_OFF_TIME_100MS   2

volatile uint8_t gSOSState;
volatile uint16_t gTickInt;
volatile uint8_t  gTimeStamp100ms;
volatile uint8_t gSOSTickTimer100ms;
volatile uint16_t gTick100ms;
volatile uint8_t gPin1ChangedTime100ms;
volatile uint8_t gPin2ChangedTime100ms;
volatile uint8_t gLastLEDLevel;
volatile uint8_t gLastLEDLevelBK;
volatile uint8_t gRepeatCnt;
volatile uint8_t gStopCounting[2];
volatile uint8_t gPINB;
#define SLEEP_TIME_LIMIT        50  //50*100ms = 5s
#define MODE_CHANGE_TIME_LIMIT  20  //20*100ms = 2s

/*
* Internal Timer Running
* It calculated by 1.2Mhz M.Clock & no Timer prescaler.
*/
ISR(TIM0_COMPA_vect)  
{
  if(++gTickInt>=1000)
  {
    gTickInt = 0;
    gTick100ms++;
    gSOSTickTimer100ms++;
   
    if(gStopCounting[0] == true)
    {
      gPin1ChangedTime100ms = 0;
      gTick100ms = 0;
    }
    else{
      if(gPin1ChangedTime100ms<0xff)
      {
        gPin1ChangedTime100ms++;
      }
    }
    
    if(gStopCounting[1] == true)
    {
      gPin2ChangedTime100ms = 0;
      gTick100ms = 0;
    }
    else{
      if(gPin2ChangedTime100ms<0xff)
      {
        gPin2ChangedTime100ms++;
      }
    }
  }
}
/*
 * Nested Interrupt. need to check Interrupted Sources
 * It runs when PIN State has been changed. (HIGH->LOW, LOW->HIGH)
 * Must beware 'Chattering' condition.
*/
ISR(PCINT0_vect)
{ 
  gPINB = PINB;
  if (!(gPINB & (1<<PB3)))
  {
    if ((gPin1ChangedTime100ms < MODE_CHANGE_TIME_LIMIT) && (gLastLEDLevel == LED_HALF))
    {
      gStopCounting[0] = false;
      gPin1ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;
      gLastLEDLevel = LED_FULL;
      return;
    }
    else
    {
      gStopCounting[0] = true;
      gSOSState = STATE_SOS_WAIT;
      gLastLEDLevel = LED_HALF;
      return;
    } 
  }
  if (!(gPINB & (1<<PB4)))
  {
    if ((gPin2ChangedTime100ms < MODE_CHANGE_TIME_LIMIT) && (gLastLEDLevel == LED_LOW))
    {
      gStopCounting[1] = false;
      gPin2ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;
      gSOSState = STATE_SOS_INIT;
      gLastLEDLevel = 0;
      return;
    }
    else
    {
      gStopCounting[1] = true;
      gSOSState = STATE_SOS_WAIT;
      gLastLEDLevel = LED_LOW;
      return;
    }
  }
   if (((gPINB&(1<<PB3))==(1<<PB3)) && ((gPINB&(1<<PB4))==(1<<PB4)))
   {
      gStopCounting[0] = false;
      gStopCounting[1] = false;
      gSOSState = STATE_SOS_WAIT;
      gLastLEDLevel = 0;
      return;
   }
}
void inputInit()
{
  PCMSK = (1<<PCINT4)|(1<<PCINT3);
  GIMSK = (1<<PCIE);
}
void pwmInit() {
    // Setup the output for PWM
    //DDRB |= (1 << PB1); //< moved to portInit();
    // Set Timer/Counter0 prescaler to clock/1.
    TCCR0B |= (1 << CS00);
    // Set to 'PWM' mode
    TCCR0A |= (1 << WGM00);
    // Clear OC0A output on compare match, upwards counting.
    TCCR0A |= (1 << COM0B1);
    // If the value '128' is reached, the PWM signal will set to LOW
    OCR0B=0;  // 128 = 50% duty cycle
    OCR0A=255;  // 1.2Mhz Internal Clock, 1Tick = 0.83us, 255Tick = 211.6us, 
                // Aprox 500*255*0.83 = 105,825us, That means, 106ms Timer running..                
    TIMSK0 |= (1 << OCIE0A);  //Enable for Internal Timer Channel.B Running
}
void portInit()
{
  PORTB |= (1<<PB1);  //Output Port Control PB1
  DDRB  |= (1<<PB1);  //Output Port Control dir PB1
}
void setup() {
    cli();
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    portInit();
    pwmInit();
    inputInit();
    sei();
    gPin1ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;  //for default setting
    gPin2ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;  //for default setting
    gRepeatCnt = 0;
    gStopCounting[0] = gStopCounting[1] = 0;
    gSOSTickTimer100ms = 0;
    gSOSState = STATE_SOS_WAIT;
}
int main(void) {
    setup();
    
    while(1) {
      if((gLastLEDLevel != gLastLEDLevelBK) && (gTick100ms % 3 == 0))
      {
        gLastLEDLevelBK = gLastLEDLevel;
        OCR0B = gLastLEDLevelBK;
      }
      if (gTick100ms>=SLEEP_TIME_LIMIT)
      {
        if((digitalRead(PB3) == HIGH) && (digitalRead(PB4) == HIGH))
        {
            sleep_enable(); // go to sleep
            sleep_cpu();
            gPin1ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;  //for default setting
            gPin2ChangedTime100ms = MODE_CHANGE_TIME_LIMIT;  //for default setting
            gRepeatCnt = 0;
            gStopCounting[0] = gStopCounting[1] = 0;
            gSOSTickTimer100ms = 0;
            gSOSState = STATE_SOS_WAIT;
        }
      }
      else
      {
         switch(gSOSState)
         {
            case STATE_SOS_WAIT:
              //do nothing..
            break;
            case STATE_SOS_INIT:
              gTick100ms = 0;
              OCR0B = S1_ON_TIME_DUTY;
              gTimeStamp100ms = gSOSTickTimer100ms = 0; //copy gTick;
              gRepeatCnt = 0;
              gSOSState = STATE_SOS_S1_ON;
            break;
            case STATE_SOS_S1_ON:
              gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > S1_ON_TIME_100MS)
              {
                gRepeatCnt++;
                OCR0B = 0;
                gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
                gSOSState = STATE_SOS_S1_OFF;
               }
            break;
            case STATE_SOS_S1_OFF:
              gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > S1_OFF_TIME_100MS)
              {
                if(gRepeatCnt>=2)
                {
                  gRepeatCnt = 0;
                  OCR0B = O2_ON_TIME_DUTY;
                  gSOSState = STATE_SOS_O2_ON;
                }
                else
                {
                   OCR0B = S1_ON_TIME_DUTY;
                   gSOSState = STATE_SOS_S1_ON;
                }
                 gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
               }
            break;
            case STATE_SOS_O2_ON:
              gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > O2_ON_TIME_100MS)
              {
                gRepeatCnt++;
                OCR0B = 0;
                gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
                gSOSState = STATE_SOS_O2_OFF;
               }
            break;
            case STATE_SOS_O2_OFF:
             gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > O2_OFF_TIME_100MS)
              {
                if(gRepeatCnt>=2)
                {
                  gRepeatCnt = 0;
                  OCR0B = S3_ON_TIME_DUTY;
                  gSOSState = STATE_SOS_S3_ON;
                }
                else
                {
                  OCR0B = O2_ON_TIME_DUTY;
                  gSOSState = STATE_SOS_O2_ON;
                }
                 gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
               } 
            break;
            case STATE_SOS_S3_ON:
              gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > S3_ON_TIME_100MS)
              {
                gRepeatCnt++;
                OCR0B = 0;
                gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
                gSOSState = STATE_SOS_S3_OFF;
               }
            break;
            case STATE_SOS_S3_OFF:
              gTick100ms = 0;
              if ((gSOSTickTimer100ms - gTimeStamp100ms) > S3_OFF_TIME_100MS)
              {
                if(gRepeatCnt>=2)
                {
                  gRepeatCnt=0;
                  OCR0B = 0;
                  gSOSState = STATE_SOS_INIT;
                }
                else
                {
                   OCR0B = S3_ON_TIME_DUTY;
                   gSOSState = STATE_SOS_S3_ON;
                }
                gTimeStamp100ms = gSOSTickTimer100ms; //copy gTick;
               }
            break;
         }
      }
   }
    return 0;
}
